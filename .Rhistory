x.event.switch = as.numeric(x$Event.Switch)
x.event = as.character(x$Question.Number)
faces$Event.Switch[which(faces$ID %in% x.id & faces$Time >= x.str & faces$Time <= x.end)] = x.event.switch
faces$Event[which(faces$ID %in% x.id & faces$Time >= x.str & faces$Time <= x.end)] = x.event
}
faces$Event = factor(faces$Event)
head(faces)
tail(faces)
library(xlsx)
demograph = read.xlsx("Files/Other/Subject Biographic Info.xlsx")
demograph = read.xlsx("Files/Other/Subject Biographic Info.xlsx", sheetIndex = 1)
head(demograph)
faces$Subject = substr(faces$ID, 1, 4)
faces$Trial = substr(faces$ID, 6, 8)
library(plyr)
faces = join(faces, demograph)
head(faces)
summary(faces)
rm(x, x.id, x.str, x.end, x.event.switch, e.event, i)
rm(x, x.id, x.str, x.end, x.event.switch, x.event, i)
head(faces)
faces$Age = factor(faces$Age)
faces$Gender = factor(faces$Gender)
summary(faces)
faces$Trial = factor(faces$Trial)
faces$Subject = factor(faces$Subject)
summary(faces)
faces[is.na(faces)] = 0
summary(faces)
colnames(faces)[1] = "Frame"
names(faces)
faces = faces[, c(11, 14:17, 1:2, 12:13, 3:10)]
head(faces)
save("faces", file = "R-Data/faces.rda")
source('C:/Git/Personal/Driving/R-Scripts/01_data_prep.R', echo=TRUE)
library(plyr)
library(reshape2)
library(ggplot2)
rm(list = ls())
load("R-Data/faces.rda")
## Calculate the baseline
baseline = ddply(subset(faces, Trial == '004'),
.(Subject, Age, Gender), summarise,
mu_Anger = mean(Anger),
mu_Contempt = mean(Contempt),
mu_Disgust = mean(Disgust),
mu_Fear = mean(Fear),
mu_Joy = mean(Joy),
mu_Sad = mean(Sad),
mu_Surprise = mean(Surprise),
mu_Neutral = mean(Neutral))
## Concentrating on simulations 4-7
faces.cen = faces[faces$Trial %in% c('004', '005', '006', '007'), ]
faces.cen = join(faces.cen, baseline, by = "Subject", type = "inner")
## Center all emotions
faces.cen$Anger = with(faces.cen, Anger - mu_Anger) * 100
faces.cen$Contempt = with(faces.cen, Contempt - mu_Contempt) * 100
faces.cen$Disgust = with(faces.cen, Disgust - mu_Disgust) * 100
faces.cen$Fear = with(faces.cen, Fear - mu_Fear) * 100
faces.cen$Joy = with(faces.cen, Joy - mu_Joy) * 100
faces.cen$Sad = with(faces.cen, Sad - mu_Sad) * 100
faces.cen$Surprise = with(faces.cen, Surprise - mu_Surprise) * 100
faces.cen$Neutral = with(faces.cen, Neutral - mu_Neutral) * 100
faces.cen = faces.cen[, -(19:28)]
## Calculate the average value and variance for each trial, event, expression
stats = ddply(faces.cen, .(Subject, Trial, Event, Age, Gender, Event.Switch), summarise,
mu_Anger = mean(Anger),
var_Anger = var(Anger),
min_Anger = min(Anger),
max_Anger = max(Anger),
mu_Contempt = mean(Contempt),
var_Contempt = var(Contempt),
min_Contempt = min(Contempt),
max_Contempt = max(Contempt),
mu_Disgust = mean(Disgust),
var_Disgust = var(Disgust),
min_Disgust = min(Disgust),
max_Disgust = max(Disgust),
mu_Fear = mean(Fear),
var_Fear = var(Fear),
min_Fear = min(Fear),
max_Fear = max(Fear),
mu_Joy = mean(Joy),
var_Joy = var(Joy),
min_Joy = min(Joy),
max_Joy = max(Joy),
mu_Sad = mean(Sad),
var_Sad = var(Sad),
min_Sad = min(Sad),
max_Sad = max(Sad),
mu_Surprise = mean(Surprise),
var_Surprise = var(Surprise),
min_Surprise = min(Surprise),
max_Surprise = max(Surprise),
mu_Neutral = mean(Neutral),
var_Neutral = var(Neutral),
min_Neutral = min(Neutral),
max_Neutral = max(N)
)
faces$Texting = 0
faces$Texting[faces$Event %in% c("Texting", "Texting and Talking")] = 1
faces$Texting = factor(faces$Texting)
stats$texting = 0
stats$texting[stats$Event %in% c("Texting", "Texting and Talking")] = 1
stats$texting = factor(stats$texting)
save(list = "faces", file = "R-Data/faces.rda")
save(list = c("stats", "baseline", "faces.cen"), file = "R-Data/other.rda")
library(plyr)
library(reshape2)
library(ggplot2)
rm(list = ls())
load("R-Data/faces.rda")
## Calculate the baseline
baseline = ddply(subset(faces, Trial == '004'),
.(Subject, Age, Gender), summarise,
mu_Anger = mean(Anger),
mu_Contempt = mean(Contempt),
mu_Disgust = mean(Disgust),
mu_Fear = mean(Fear),
mu_Joy = mean(Joy),
mu_Sad = mean(Sad),
mu_Surprise = mean(Surprise),
mu_Neutral = mean(Neutral))
## Concentrating on simulations 4-7
faces.cen = faces[faces$Trial %in% c('004', '005', '006', '007'), ]
faces.cen = join(faces.cen, baseline, by = "Subject", type = "inner")
## Center all emotions
faces.cen$Anger = with(faces.cen, Anger - mu_Anger) * 100
faces.cen$Contempt = with(faces.cen, Contempt - mu_Contempt) * 100
faces.cen$Disgust = with(faces.cen, Disgust - mu_Disgust) * 100
faces.cen$Fear = with(faces.cen, Fear - mu_Fear) * 100
faces.cen$Joy = with(faces.cen, Joy - mu_Joy) * 100
faces.cen$Sad = with(faces.cen, Sad - mu_Sad) * 100
faces.cen$Surprise = with(faces.cen, Surprise - mu_Surprise) * 100
faces.cen$Neutral = with(faces.cen, Neutral - mu_Neutral) * 100
faces.cen = faces.cen[, -(19:28)]
stats = ddply(faces.cen, .(Subject, Trial, Event, Age, Gender, Event.Switch), summarise,
mu_Anger = mean(Anger),
var_Anger = var(Anger),
min_Anger = min(Anger),
max_Anger = max(Anger),
mu_Contempt = mean(Contempt),
var_Contempt = var(Contempt),
min_Contempt = min(Contempt),
max_Contempt = max(Contempt),
mu_Disgust = mean(Disgust),
var_Disgust = var(Disgust),
min_Disgust = min(Disgust),
max_Disgust = max(Disgust),
mu_Fear = mean(Fear),
var_Fear = var(Fear),
min_Fear = min(Fear),
max_Fear = max(Fear),
mu_Joy = mean(Joy),
var_Joy = var(Joy),
min_Joy = min(Joy),
max_Joy = max(Joy),
mu_Sad = mean(Sad),
var_Sad = var(Sad),
min_Sad = min(Sad),
max_Sad = max(Sad),
mu_Surprise = mean(Surprise),
var_Surprise = var(Surprise),
min_Surprise = min(Surprise),
max_Surprise = max(Surprise),
mu_Neutral = mean(Neutral),
var_Neutral = var(Neutral),
min_Neutral = min(Neutral),
max_Neutral = max(Neutral)
)
faces$Texting = 0
faces$Texting[faces$Event %in% c("Texting", "Texting and Talking")] = 1
faces$Texting = factor(faces$Texting)
stats$texting = 0
stats$texting[stats$Event %in% c("Texting", "Texting and Talking")] = 1
stats$texting = factor(stats$texting)
save(list = "faces", file = "R-Data/faces.rda")
save(list = "stats", file = "R-Data/stats.rda")
save(list = "baseline", file = "R-Data/baseline.rda")
save(list = "faces.cen", file = "R-Data/faces_cen.rda")
rm(list = ls())
rm(list = ls())
library(nnet)
library(randomForest)
load("R-Data/stats.rda.rda")
rm(list = ls())
library(nnet)
library(randomForest)
load("R-Data/stats.rda")
head(stats)
x = sample(x = nrow(stats), size = nrow(stats)/2, replace = FALSE)
train = stats[x, c(4:5, 7:39)]
test = stats[-x, c(4:5, 7:39)]
mdl.nnet = nnet(formula = texting ~ ., size = 10, data = train)
mdl.rf = randomForest(formula = texting ~ ., ntree = 20, data = train)
results = data.frame(actual = train$texting, nn.pred = predict(mdl.nnet, train, type = "raw"))
results$nn.pred.class = 0; results$nn.pred.class[results$nn.pred > .25] = 1
results$rf.pred = predict(mdl.rf, train, type = "prob")[, 2]
results$rf.pred.class = 0; results$rf.pred.class[results$rf.pred > .2] = 1
head(restults)
head(results)
table(results$actual, results$nn.pred.class)
table(results$actual, results$rf.pred.class)
results = data.frame(actual = train$texting, nn.pred = predict(mdl.nnet, test, type = "raw"))
results$nn.pred.class = 0; results$nn.pred.class[results$nn.pred > .25] = 1
results$rf.pred = predict(mdl.rf, test, type = "prob")[, 2]
results$rf.pred.class = 0; results$rf.pred.class[results$rf.pred > .2] = 1
results = data.frame(actual = train$texting, nn.pred = predict(mdl.nnet, test, type = "raw"))
results = data.frame(actual = test$texting, nn.pred = predict(mdl.nnet, test, type = "raw"))
results$nn.pred.class = 0; results$nn.pred.class[results$nn.pred > .25] = 1
results$rf.pred = predict(mdl.rf, test, type = "prob")[, 2]
results$rf.pred.class = 0; results$rf.pred.class[results$rf.pred > .2] = 1
table(results$actual, results$nn.pred.class)
table(results$actual, results$rf.pred.class)
head(stats)
head(train)
varImpPlot(mdl.rf)
x = sample(x = nrow(stats), size = nrow(stats)/2, replace = FALSE)
train = stats[x, c(4:5, 7:39)]
test = stats[-x, c(4:5, 7:39)]
mdl.nnet = nnet(formula = texting ~ ., size = 10, data = train)
mdl.rf = randomForest(formula = texting ~ ., ntree = 20, data = train)
varImpPlot(mdl.rf)
x = sample(x = nrow(stats), size = round(nrow(stats) * .75), replace = FALSE)
train = stats[x, c(4:5, 7:39)]
test = stats[-x, c(4:5, 7:39)]
mdl.nnet = nnet(formula = texting ~ ., size = 10, data = train)
mdl.rf = randomForest(formula = texting ~ ., ntree = 20, data = train)
varImpPlot(mdl.rf)
x = sample(x = nrow(stats), size = round(nrow(stats) * .75), replace = FALSE)
train = stats[x, c(4:5, 7:39)]
test = stats[-x, c(4:5, 7:39)]
mdl.nnet = nnet(formula = texting ~ ., size = 10, data = train)
mdl.rf = randomForest(formula = texting ~ ., ntree = 20, data = train)
varImpPlot(mdl.rf)
mdl.rf = randomForest(formula = texting ~ ., ntree = 150, data = train)
varImpPlot(mdl.rf)
mdl.rf
results = data.frame(actual = train$texting, nn.pred = predict(mdl.nnet, train, type = "raw"))
results$nn.pred.class = 0; results$nn.pred.class[results$nn.pred > .25] = 1
results$rf.pred = predict(mdl.rf, train, type = "prob")[, 2]
results$rf.pred.class = 0; results$rf.pred.class[results$rf.pred > .2] = 1
table(results$actual, results$nn.pred.class)
table(results$actual, results$rf.pred.class)
results = data.frame(actual = test$texting, nn.pred = predict(mdl.nnet, test, type = "raw"))
results$nn.pred.class = 0; results$nn.pred.class[results$nn.pred > .25] = 1
results$rf.pred = predict(mdl.rf, test, type = "prob")[, 2]
results$rf.pred.class = 0; results$rf.pred.class[results$rf.pred > .2] = 1
table(results$actual, results$nn.pred.class)
table(results$actual, results$rf.pred.class)
rm(list = ls())
library(nnet)
load("R-Data/faces_cen.rda")
head(faces.cen)
summary(faces.cen)
train = subset(faces.cen, ID == 'T001-007')
summary(train)
train = train[1:12000, ]
sub = subset(faces.cen, ID == 'T001-007')
train = sub[1:12000, ]
test = sub[nrow(train):nrow(sub), ]
summary(train)
summary(test)
ls()
dim(test)
sub = subset(faces.cen, ID == 'T001-007')
train = sub[1:12000, 6:18]
test = sub[nrow(train):nrow(sub), 6:18]
mdl.nn = nnet(Texting ~ ., size = 1, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
head(results.train)
table(results.train)
summary(results)
summary(results.train)
summary(results)
summary(train)
mdl.nn
results.train$pred.class = 0
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
table(results.test$actual, results.test$pred.class)
head(train)
sub = subset(faces.cen, ID == 'T001-007')
names(sub)
sub = subset(faces.cen, ID == 'T001-007')
train = sub[1:12000, c(7, 10:18)]
test = sub[nrow(train):nrow(sub), c(7, 10:18)]
mdl.nn = nnet(Texting ~ ., size = 1, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
head(train)
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 1, data = train)
sub = subset(faces.cen, ID == 'T001-007')
train = sub[1:12000, c(7, 10:18)]
test = sub[nrow(train):nrow(sub), c(7, 10:18)]
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 1, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 2, data = train)
help(nnet)
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 2, maxit = 200, data = train)
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 2, maxit = 200, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
summary(dta)
summary(train)
head(faces.cen)
unique(faces.cen[, 4:5])
unique(faces.cen[, c(2, 4:5)])
sub2 = subset(faces.cen, ID == 'T003-007')
test = sub2[nrow(train):nrow(sub2), c(7, 10:18)]
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
table(results.test$actual, results.test$pred.class)
summary(sub2)
summary(train)
summary(test)
sub = subset(faces.cen, ID == 'T001-007')
train = sub[1:12000, c(7, 10:18)]
test = sub[nrow(train):nrow(sub), c(7, 10:18)]
sub2 = subset(faces.cen, ID == 'T003-007')
test2 = sub2[nrow(train):nrow(sub2), c(7, 10:18)]
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 2, maxit = 200, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
table(results.test2$actual, results.test2$pred.class)
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
table(results.test2$actual, results.test2$pred.class)
sub = subset(faces.cen, ID == 'T001-007')
train = sub[1:12000, c(7, 10:18)]
test = sub[nrow(train):nrow(sub), c(7, 10:18)]
sub2 = subset(faces.cen, ID == 'T003-007')
test2 = sub2[nrow(train):nrow(sub2), c(7, 10:18)]
mdl.nn = nnet(Texting ~ . - Time, size = 1, maxit = 100, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
table(results.test2$actual, results.test2$pred.class)
sub = subset(faces.cen, ID == 'T001-007')
train = sub[1:12000, c(7, 10:18)]
test = sub[nrow(train):nrow(sub), c(7, 10:18)]
sub2 = subset(faces.cen, ID == 'T003-007')
test2 = sub2[nrow(train):nrow(sub2), c(7, 10:18)]
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
table(results.test2$actual, results.test2$pred.class)
sub = subset(faces.cen, ID == 'T001-007')
train = sub[1:12000, c(7, 10:18)]
test = sub[nrow(train):nrow(sub), c(7, 10:18)]
sub2 = subset(faces.cen, ID == 'T003-007')
train2 = sub2[1:12000, c(7, 10:18)]
test2 = sub2[nrow(train2):nrow(sub2), c(7, 10:18)]
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
table(results.test2$actual, results.test2$pred.class)
head(train)
head(train2)
train3 = rbind(subset(faces.cen, ID == 'T001-007'),
subset(faces.cen, ID == 'T003-007'))
sub3 = rbind(subset(faces.cen, ID == 'T001-007'), subset(faces.cen, ID == 'T003-007'))
head(sub)
train3 = rbind(sub[1:12000, c(2, 7, 10:18)], sub2[1:12000, c(2, 7, 10:18)])
test3 = rbind(sub[nrow(train):nrow(sub), c(2, 7, 10:18)],
sub2[nrow(train2):nrow(sub2), c(2, 7, 10:18)])
head(test3)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
results.test3 = data.frame(actual = test3$Texting, pred = predict(mdl.nn, test3, type = "raw"))
results.test3$pred.class = 0; results.test3$pred.class[results.test3$pred > .4] = 1
table(results.test3$actual, results.test3$pred.class)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
mdl.nn2 = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train3)
results.test3 = data.frame(actual = test3$Texting, pred = predict(mdl.nn, test3, type = "raw"))
results.test3$pred.class = 0; results.test3$pred.class[results.test3$pred > .4] = 1
table(results.test3$actual, results.test3$pred.class)
results.train3 = data.frame(actual = train3$Texting, pred = predict(mdl.nn, train3, type = "raw"))
results.train3$pred.class = 0; results.train3$pred.class[results.train3$pred > .4] = 1
table(results.train3$actual, results.train3$pred.class)
table(results.test3$actual, results.test3$pred.class)
results.train3 = data.frame(actual = train3$Texting, pred = predict(mdl.nn2, train3, type = "raw"))
results.train3$pred.class = 0; results.train3$pred.class[results.train3$pred > .4] = 1
results.test3 = data.frame(actual = test3$Texting, pred = predict(mdl.nn2, test3, type = "raw"))
results.test3$pred.class = 0; results.test3$pred.class[results.test3$pred > .4] = 1
table(results.train3$actual, results.train3$pred.class)
table(results.test3$actual, results.test3$pred.class)
mdlls9)
ls()
summary(train3)
mdl.nn2 = nnet(Texting ~ . - Time, size = 1, maxit = 100, data = train3)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
results.train3 = data.frame(actual = train3$Texting, pred = predict(mdl.nn2, train3, type = "raw"))
results.train3$pred.class = 0; results.train3$pred.class[results.train3$pred > .4] = 1
results.test3 = data.frame(actual = test3$Texting, pred = predict(mdl.nn2, test3, type = "raw"))
results.test3$pred.class = 0; results.test3$pred.class[results.test3$pred > .4] = 1
table(results.train3$actual, results.train3$pred.class)
table(results.test3$actual, results.test3$pred.class)
mdl.nn2 = nnet(Texting ~ . - Time, size = 2, maxit = 200, data = train3)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
results.train3 = data.frame(actual = train3$Texting, pred = predict(mdl.nn2, train3, type = "raw"))
results.train3$pred.class = 0; results.train3$pred.class[results.train3$pred > .4] = 1
results.test3 = data.frame(actual = test3$Texting, pred = predict(mdl.nn2, test3, type = "raw"))
results.test3$pred.class = 0; results.test3$pred.class[results.test3$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
table(results.test2$actual, results.test2$pred.class)
table(results.train3$actual, results.train3$pred.class)
table(results.test3$actual, results.test3$pred.class)
rm(list = ls())
library(nnet)
load("R-Data/faces.rda")
sub = subset(faces, ID == 'T001-007')
train = sub[1:12000, c(7, 10:18)]
test = sub[nrow(train):nrow(sub), c(7, 10:18)]
sub2 = subset(faces, ID == 'T003-007')
train2 = sub2[1:12000, c(7, 10:18)]
test2 = sub2[nrow(train2):nrow(sub2), c(7, 10:18)]
train3 = rbind(sub[1:12000, c(2, 7, 10:18)], sub2[1:12000, c(2, 7, 10:18)])
test3 = rbind(sub[nrow(train):nrow(sub), c(2, 7, 10:18)],
sub2[nrow(train2):nrow(sub2), c(2, 7, 10:18)])
mdl.nn = nnet(Texting ~ . - Time + time(Time), size = 1, maxit = 100, data = train)
mdl.nn2 = nnet(Texting ~ . - Time, size = 2, maxit = 200, data = train3)
results.train = data.frame(actual = train$Texting, pred = predict(mdl.nn, train, type = "raw"))
results.train$pred.class = 0; results.train$pred.class[results.train$pred > .4] = 1
results.test = data.frame(actual = test$Texting, pred = predict(mdl.nn, test, type = "raw"))
results.test$pred.class = 0; results.test$pred.class[results.test$pred > .4] = 1
results.test2 = data.frame(actual = test2$Texting, pred = predict(mdl.nn, test2, type = "raw"))
results.test2$pred.class = 0; results.test2$pred.class[results.test2$pred > .4] = 1
results.train3 = data.frame(actual = train3$Texting, pred = predict(mdl.nn2, train3, type = "raw"))
results.train3$pred.class = 0; results.train3$pred.class[results.train3$pred > .4] = 1
results.test3 = data.frame(actual = test3$Texting, pred = predict(mdl.nn2, test3, type = "raw"))
results.test3$pred.class = 0; results.test3$pred.class[results.test3$pred > .4] = 1
table(results.train$actual, results.train$pred.class)
table(results.test$actual, results.test$pred.class)
table(results.test2$actual, results.test2$pred.class)
table(results.train3$actual, results.train3$pred.class)
table(results.test3$actual, results.test3$pred.class)
rm(list = ls())
library(nnet)
load("R-Data/faces.rda")
sub = subset(faces, ID == 'T001-007')
train = sub[1:12000, c(7, 10:18)]
test = sub[nrow(train):nrow(sub), c(7, 10:18)]
rm(list = ls())
install.packages("pander")
